"""Pre-run modifier that excludes tests by their name.

Tests to exclude are specified by using a pattern that is both case and space
insensitive and supports '*' (match anything) and '?' (match single character)
as wildcards.
"""

from robot.api import SuiteVisitor
from robot.utils import Matcher
import re



class ExcludeTests(SuiteVisitor):

    def __init__(self, fname):
        # load the test exclusion file generated by the jenkins plug-in
        # the plugin lists suites to be excluded as java elements (ending with .class and .java)
        with open(fname) as f:
            self.excludesuites = f.readlines()
        self.excludesuites = [x.strip() for x in self.excludesuites ]
        #clean the java origin from the jenkins plugin
        self.excludesuites = [re.sub(r'\.java$', '', l) for l in self.excludesuites]
        self.excludesuites = [re.sub(r'\.class$', '', l) for l in self.excludesuites]
        #remove duplicates
        self.excludesuites = list(set(self.excludesuites))

    def start_suite(self, suite):
        """Remove suites that match the given list."""
        print("*************" + self._suite_name_path(suite))
        suite.suites = [s for s in suite.suites if not self._is_excluded(s)]

    def _is_excluded(self, suite):
        if self._suite_name_path(suite)  in self.excludesuites:
            print(self._suite_name_path(suite) + "----- has been excluded")
        else:
            print(self._suite_name_path(suite) + "----- has been kept")

        return self._suite_name_path(suite)  in self.excludesuites

    def _suite_name_path(self, suite):
        """Returns the full path and name of the current test suite"""
        sfpath=suite.name
        parent = suite.parent
        while not parent is None:
            sfpath=parent.name + '/' + sfpath
            parent = parent.parent
        return sfpath


    def end_suite(self, suite):
        """Remove suites that are empty after removing tests."""
        suite.suites = [s for s in suite.suites if s.test_count > 0]

    def visit_test(self, test):
        """Avoid visiting tests and their keywords to save a little time."""
        pass
